{
  "table-list": {
    "prefix": "coderTableList",
    "body": [
      "<template>",
      "  <a-card :bordered=\"false\">",
      "    <a-form layout=\"inline\" :label-col=\"{ span: 5 }\">",
      "      <a-form-item label=\"名称：\">",
      "        <a-input v-model:value=\"searcherForm.name\" placeholder=\"名称\"></a-input>",
      "      </a-form-item>",
      "",
      "      <a-form-item>",
      "        <a-space>",
      "          <a-button type=\"primary\" @click=\"onSearch\"",
      "            ><SearchOutlined />查询</a-button",
      "          >",
      "          <a-button type=\"primary\" danger @click=\"() => emits('add')\"",
      "            ><PlusOutlined />新增</a-button",
      "          >",
      "        </a-space>",
      "      </a-form-item>",
      "    </a-form>",
      "  </a-card>",
      "  <a-card>",
      "    <a-table",
      "      rowKey=\"id\"",
      "      :dataSource=\"dataSource\"",
      "      :columns=\"columns\"",
      "      :loading=\"loading\"",
      "      :pagination=\"pagination\"",
      "      @change=\"onPagerChanged\"",
      "    >",
      "      <template #action=\"{ record }\">",
      "        <a-space>",
      "          <a-button @click=\"() => emits('edit', record.id)\">编辑</a-button>",
      "        </a-space>",
      "      </template>",
      "",
      "      <template #name=\"{ record }\">",
      "        <span>{{ record.name }}</span>",
      "      </template>",
      "",
      "      <template #publish=\"{ record }\">",
      "        {{ record.publish ? \"已发布\" : \"草稿\" }}",
      "      </template>",
      "    </a-table>",
      "  </a-card>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { inject, reactive, toRaw, ref, computed, onMounted } from \"vue\";",
      "import {",
      "  message,",
      "  Input as AInput,",
      "  Space as ASpace,",
      "  Button as AButton,",
      "  Table as ATable,",
      "  Card as ACard,",
      "  Form as AForm,",
      "  FormItem as AFormItem,",
      "  Divider as ADivider,",
      "  PaginationProps,",
      "} from \"ant-design-vue\";",
      "",
      "import {",
      "  EditOutlined,",
      "  UnorderedListOutlined,",
      "  PlusOutlined,",
      "  SearchOutlined,",
      "  LoginOutlined,",
      "} from \"@ant-design/icons-vue\";",
      "import columnDefine from \"./columns\"; //TODO:导入column",
      "import { injectIptionsKey, SwfOptions } from \"../types/SwfOption\";",
      "import {",
      "  WorkProcessListItem,",
      "  WorkProcessSearcher,",
      "} from \"../types/workProcessListItem\";",
      "",
      "const columns = reactive(columnDefine);",
      "const total = ref(0);",
      "const option = inject(injectIptionsKey) as SwfOptions;",
      "const emits = defineEmits([\"add\", \"edit\"]);",
      "const searcherForm = reactive({",
      "  page: 1,",
      "  pageSize: 40,",
      "  name: \"\",",
      "} as WorkProcessSearcher);",
      "const loading = ref(false);",
      "const dataSource = reactive([] as Array<WorkProcessListItem>);",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    pageSize: toRaw(searcherForm.pageSize),",
      "    current: toRaw(searcherForm.page),",
      "  };",
      "});",
      "const onSearch = () => {",
      "  searcherForm.page = 1;",
      "  reload();",
      "};",
      "const onAdd = () => {",
      "  emits(\"add\");",
      "};",
      "const onPagerChanged = (pagination: PaginationProps) => {",
      "  if (pagination.pageSize) searcherForm.pageSize = pagination.pageSize;",
      "  if (pagination.current) searcherForm.page = pagination.current;",
      "  reload();",
      "};",
      "",
      "const reload = () => {",
      "  const api = option.defineApi;",
      "  loading.value = true;",
      "  let t1 = api.list(toRaw(searcherForm)).then((resp) => {",
      "    dataSource.splice(0);",
      "    dataSource.push(...resp.data);",
      "  });",
      "  let t2 = api.count(toRaw(searcherForm)).then((resp) => {",
      "    total.value = resp.data;",
      "  });",
      "",
      "  Promise.all([t1, t2]).then(() => {",
      "    loading.value = false;",
      "  });",
      "};",
      "",
      "onMounted(() => {",
      "  reload();",
      "});",
      "</script>",
      ""
    ],
    "description": "table-list"
  }